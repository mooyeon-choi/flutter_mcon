import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_mcon/flutter_mcon.dart';
import '../../domain/icon_data.dart' as mcon;
import '../../domain/playground_state.dart';
import '../controllers/playground_controller.dart';

/// Interactive playground page for testing icon animations
class PlaygroundPage extends StatefulWidget {
  const PlaygroundPage({super.key});

  @override
  State<PlaygroundPage> createState() => _PlaygroundPageState();
}

class _PlaygroundPageState extends State<PlaygroundPage> {
  late PlaygroundController _controller;

  @override
  void initState() {
    super.initState();
    _controller = PlaygroundController();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ListenableBuilder(
      listenable: _controller,
      builder: (context, _) {
        return Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left: Icon Grid (Scrollable)
            Expanded(
              child: _IconGrid(
                selectedIcon: _controller.state.selectedIcon,
                iconSize: _controller.state.size,
                iconColor: _controller.state.color,
                animationType: _controller.state.animationType,
                animationDirection: _controller.state.animationDirection,
                duration: _controller.state.duration,
                curve: _controller.state.curve,
                onIconSelected: _controller.selectIcon,
              ),
            ),

            // Right: Control Panel (Fixed)
            _ControlPanel(
              state: _controller.state,
              onSizeChanged: _controller.updateSize,
              onColorChanged: _controller.updateColor,
              onDurationChanged: _controller.updateDuration,
              onAnimationTypeChanged: _controller.updateAnimationType,
              onAnimationDirectionChanged: _controller.updateAnimationDirection,
              onCurveChanged: _controller.updateCurve,
              onClearSelection: _controller.clearSelection,
            ),
          ],
        );
      },
    );
  }
}

/// Icon grid widget displaying all available icons
class _IconGrid extends StatelessWidget {
  const _IconGrid({
    required this.selectedIcon,
    required this.iconSize,
    required this.iconColor,
    required this.animationType,
    required this.animationDirection,
    required this.duration,
    required this.curve,
    required this.onIconSelected,
  });

  final String? selectedIcon;
  final double iconSize;
  final Color iconColor;
  final MconAnimationType animationType;
  final MconAnimationDirection animationDirection;
  final Duration duration;
  final Curve curve;
  final Function(String) onIconSelected;

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(32),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Icon Playground',
            style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                  fontWeight: FontWeight.bold,
                  letterSpacing: -0.5,
                ),
          ),
          const SizedBox(height: 8),
          Text(
            'Click any icon to apply animations and customize its appearance',
            style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                  color: Theme.of(context)
                      .colorScheme
                      .onSurface
                      .withValues(alpha: 0.6),
                ),
          ),
          const SizedBox(height: 32),
          Wrap(
            spacing: 16,
            runSpacing: 16,
            children: mcon.AvailableIcons.all.map((icon) {
              final isSelected = selectedIcon == icon.name;
              return _IconGridItem(
                icon: icon,
                isSelected: isSelected,
                size: iconSize,
                color: iconColor,
                animationType:
                    isSelected ? animationType : MconAnimationType.none,
                animationDirection: animationDirection,
                duration: duration,
                curve: curve,
                onTap: () => onIconSelected(icon.name),
              );
            }).toList(),
          ),
        ],
      ),
    );
  }
}

/// Individual icon grid item with selection state
class _IconGridItem extends StatefulWidget {
  const _IconGridItem({
    required this.icon,
    required this.isSelected,
    required this.size,
    required this.color,
    required this.animationType,
    required this.animationDirection,
    required this.duration,
    required this.curve,
    required this.onTap,
  });

  final mcon.IconData icon;
  final bool isSelected;
  final double size;
  final Color color;
  final MconAnimationType animationType;
  final MconAnimationDirection animationDirection;
  final Duration duration;
  final Curve curve;
  final VoidCallback onTap;

  @override
  State<_IconGridItem> createState() => _IconGridItemState();
}

class _IconGridItemState extends State<_IconGridItem> {
  final GlobalKey<MconBaseState> _iconKey = GlobalKey<MconBaseState>();
  bool _isHovered = false;
  bool _isIconHovered = false;

  void _handleTap() {
    if (widget.isSelected) {
      // Already focused - trigger animation
      _iconKey.currentState?.forward();
    } else {
      // Not focused - just focus it
      widget.onTap();
    }
  }

  void _handleIconTap() {
    if (widget.isSelected) {
      // Trigger animation when clicking on icon in focused state
      _iconKey.currentState?.forward();
    }
  }

  @override
  Widget build(BuildContext context) {
    return MouseRegion(
      cursor: widget.isSelected && !_isIconHovered
          ? SystemMouseCursors.basic
          : SystemMouseCursors.click,
      onEnter: (_) => setState(() => _isHovered = true),
      onExit: (_) => setState(() => _isHovered = false),
      child: GestureDetector(
        onTap: _handleTap,
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          width: widget.size + 48,
          height: widget.size + 64,
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: widget.isSelected
                ? Theme.of(context).colorScheme.primaryContainer
                : _isHovered
                    ? Theme.of(context)
                        .colorScheme
                        .surfaceContainerHighest
                        .withValues(alpha: 0.5)
                    : Theme.of(context).colorScheme.surface,
            borderRadius: BorderRadius.circular(16),
            border: Border.all(
              color: widget.isSelected
                  ? Theme.of(context).colorScheme.primary
                  : Theme.of(context)
                      .colorScheme
                      .outline
                      .withValues(alpha: 0.2),
              width: widget.isSelected ? 2 : 1,
            ),
            boxShadow: widget.isSelected || _isHovered
                ? [
                    BoxShadow(
                      color: widget.isSelected
                          ? Theme.of(context)
                              .colorScheme
                              .primary
                              .withValues(alpha: 0.2)
                          : Colors.black.withValues(alpha: 0.05),
                      blurRadius: widget.isSelected ? 12 : 8,
                      offset: const Offset(0, 4),
                    ),
                  ]
                : null,
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              MouseRegion(
                cursor: widget.isSelected
                    ? SystemMouseCursors.click
                    : SystemMouseCursors.basic,
                onEnter: (_) => setState(() => _isIconHovered = true),
                onExit: (_) => setState(() => _isIconHovered = false),
                child: widget.isSelected
                    ? GestureDetector(
                        onTap: _handleIconTap,
                        child: SizedBox(
                          width: widget.size,
                          height: widget.size,
                          child: _buildIcon(),
                        ),
                      )
                    : IgnorePointer(
                        child: SizedBox(
                          width: widget.size,
                          height: widget.size,
                          child: _buildIcon(),
                        ),
                      ),
              ),
              const SizedBox(height: 8),
              Text(
                widget.icon.displayName,
                style: Theme.of(context).textTheme.labelSmall?.copyWith(
                      fontWeight: widget.isSelected
                          ? FontWeight.w600
                          : FontWeight.normal,
                      color: widget.isSelected
                          ? Theme.of(context).colorScheme.primary
                          : Theme.of(context)
                              .colorScheme
                              .onSurface
                              .withValues(alpha: 0.7),
                    ),
                textAlign: TextAlign.center,
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildIcon() {
    switch (widget.icon.name) {
      case '10k':
        return Mcon10k(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '10mp':
        return Mcon10mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '11mp':
        return Mcon11mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '123':
        return Mcon123(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '12mp':
        return Mcon12mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '13mp':
        return Mcon13mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '14mp':
        return Mcon14mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '15mp':
        return Mcon15mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '16mp':
        return Mcon16mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '17mp':
        return Mcon17mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '18_up_rating':
        return Mcon18UpRating(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '18mp':
        return Mcon18mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '19mp':
        return Mcon19mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '1k':
        return Mcon1k(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '1k_plus':
        return Mcon1kPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '1x_mobiledata':
        return Mcon1xMobiledata(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '1x_mobiledata_badge':
        return Mcon1xMobiledataBadge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '20mp':
        return Mcon20mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '21mp':
        return Mcon21mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '22mp':
        return Mcon22mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '23mp':
        return Mcon23mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '24fps_select':
        return Mcon24fpsSelect(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '24mp':
        return Mcon24mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '2d':
        return Mcon2d(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '2k':
        return Mcon2k(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '2k_plus':
        return Mcon2kPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '2mp':
        return Mcon2mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '30fps':
        return Mcon30fps(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '30fps_select':
        return Mcon30fpsSelect(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '360':
        return Mcon360(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '3d':
        return Mcon3d(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '3d_rotation':
        return Mcon3dRotation(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '3g_mobiledata':
        return Mcon3gMobiledata(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '3g_mobiledata_badge':
        return Mcon3gMobiledataBadge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '3k':
        return Mcon3k(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '3k_plus':
        return Mcon3kPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '3mp':
        return Mcon3mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '3p':
        return Mcon3p(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '4g_mobiledata':
        return Mcon4gMobiledata(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '4g_mobiledata_badge':
        return Mcon4gMobiledataBadge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '4g_plus_mobiledata':
        return Mcon4gPlusMobiledata(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '4k':
        return Mcon4k(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '4k_plus':
        return Mcon4kPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '4mp':
        return Mcon4mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '50mp':
        return Mcon50mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '5g':
        return Mcon5g(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '5g_mobiledata_badge':
        return Mcon5gMobiledataBadge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '5k':
        return Mcon5k(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '5k_plus':
        return Mcon5kPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '5mp':
        return Mcon5mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '60fps':
        return Mcon60fps(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '60fps_select':
        return Mcon60fpsSelect(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '6_ft_apart':
        return Mcon6FtApart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '6k':
        return Mcon6k(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '6k_plus':
        return Mcon6kPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '6mp':
        return Mcon6mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '7k':
        return Mcon7k(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '7k_plus':
        return Mcon7kPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '7mp':
        return Mcon7mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '8k':
        return Mcon8k(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '8k_plus':
        return Mcon8kPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '8mp':
        return Mcon8mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '9k':
        return Mcon9k(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '9k_plus':
        return Mcon9kPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case '9mp':
        return Mcon9mp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'abc':
        return MconAbc(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'ac_unit':
        return MconAcUnit(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'accessibility':
        return MconAccessibility(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'accessibility_new':
        return MconAccessibilityNew(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'accessible':
        return MconAccessible(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'accessible_forward':
        return MconAccessibleForward(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'accessible_menu':
        return MconAccessibleMenu(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'account_balance':
        return MconAccountBalance(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'account_balance_wallet':
        return MconAccountBalanceWallet(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'account_box':
        return MconAccountBox(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'account_child':
        return MconAccountChild(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'account_child_invert':
        return MconAccountChildInvert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'account_circle':
        return MconAccountCircle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'account_circle_off':
        return MconAccountCircleOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'account_tree':
        return MconAccountTree(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'action_key':
        return MconActionKey(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'activity_zone':
        return MconActivityZone(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'acupuncture':
        return MconAcupuncture(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'acute':
        return MconAcute(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'ad':
        return MconAd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'ad_group':
        return MconAdGroup(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'ad_group_off':
        return MconAdGroupOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'ad_off':
        return MconAdOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'adaptive_audio_mic':
        return MconAdaptiveAudioMic(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'adaptive_audio_mic_off':
        return MconAdaptiveAudioMicOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'adb':
        return MconAdb(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add':
        return MconAdd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_2':
        return MconAdd2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_a_photo':
        return MconAddAPhoto(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_ad':
        return MconAddAd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_alert':
        return MconAddAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_box':
        return MconAddBox(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_business':
        return MconAddBusiness(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_call':
        return MconAddCall(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_card':
        return MconAddCard(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_chart':
        return MconAddChart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_circle':
        return MconAddCircle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_column_left':
        return MconAddColumnLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_column_right':
        return MconAddColumnRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_comment':
        return MconAddComment(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_diamond':
        return MconAddDiamond(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_home':
        return MconAddHome(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_home_work':
        return MconAddHomeWork(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_link':
        return MconAddLink(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_location':
        return MconAddLocation(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_location_alt':
        return MconAddLocationAlt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_moderator':
        return MconAddModerator(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_notes':
        return MconAddNotes(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_photo_alternate':
        return MconAddPhotoAlternate(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_reaction':
        return MconAddReaction(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_road':
        return MconAddRoad(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_row_above':
        return MconAddRowAbove(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_row_below':
        return MconAddRowBelow(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_shopping_cart':
        return MconAddShoppingCart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_task':
        return MconAddTask(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_to_drive':
        return MconAddToDrive(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_to_queue':
        return MconAddToQueue(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'add_triangle':
        return MconAddTriangle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'adf_scanner':
        return MconAdfScanner(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'adjust':
        return MconAdjust(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'admin_meds':
        return MconAdminMeds(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'admin_panel_settings':
        return MconAdminPanelSettings(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'ads_click':
        return MconAdsClick(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'agender':
        return MconAgender(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'agriculture':
        return MconAgriculture(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'air':
        return MconAir(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'air_freshener':
        return MconAirFreshener(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'air_purifier':
        return MconAirPurifier(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'air_purifier_gen':
        return MconAirPurifierGen(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airline_seat_flat':
        return MconAirlineSeatFlat(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airline_seat_flat_angled':
        return MconAirlineSeatFlatAngled(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airline_seat_individual_suite':
        return MconAirlineSeatIndividualSuite(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airline_seat_legroom_extra':
        return MconAirlineSeatLegroomExtra(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airline_seat_legroom_normal':
        return MconAirlineSeatLegroomNormal(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airline_seat_legroom_reduced':
        return MconAirlineSeatLegroomReduced(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airline_seat_recline_extra':
        return MconAirlineSeatReclineExtra(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airline_seat_recline_normal':
        return MconAirlineSeatReclineNormal(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airline_stops':
        return MconAirlineStops(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airlines':
        return MconAirlines(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airplane_ticket':
        return MconAirplaneTicket(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airplanemode_inactive':
        return MconAirplanemodeInactive(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airplay':
        return MconAirplay(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airport_shuttle':
        return MconAirportShuttle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'airwave':
        return MconAirwave(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'alarm':
        return MconAlarm(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'alarm_add':
        return MconAlarmAdd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'alarm_off':
        return MconAlarmOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'alarm_on':
        return MconAlarmOn(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'alarm_pause':
        return MconAlarmPause(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'alarm_smart_wake':
        return MconAlarmSmartWake(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'album':
        return MconAlbum(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_center':
        return MconAlignCenter(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_end':
        return MconAlignEnd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_flex_center':
        return MconAlignFlexCenter(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_flex_end':
        return MconAlignFlexEnd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_flex_start':
        return MconAlignFlexStart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_horizontal_center':
        return MconAlignHorizontalCenter(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_horizontal_left':
        return MconAlignHorizontalLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_horizontal_right':
        return MconAlignHorizontalRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_items_stretch':
        return MconAlignItemsStretch(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_justify_center':
        return MconAlignJustifyCenter(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_justify_flex_end':
        return MconAlignJustifyFlexEnd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_justify_flex_start':
        return MconAlignJustifyFlexStart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_justify_space_around':
        return MconAlignJustifySpaceAround(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_justify_space_between':
        return MconAlignJustifySpaceBetween(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_justify_space_even':
        return MconAlignJustifySpaceEven(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_justify_stretch':
        return MconAlignJustifyStretch(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_self_stretch':
        return MconAlignSelfStretch(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_space_around':
        return MconAlignSpaceAround(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_space_between':
        return MconAlignSpaceBetween(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_space_even':
        return MconAlignSpaceEven(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_start':
        return MconAlignStart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_stretch':
        return MconAlignStretch(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_vertical_bottom':
        return MconAlignVerticalBottom(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_vertical_center':
        return MconAlignVerticalCenter(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'align_vertical_top':
        return MconAlignVerticalTop(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'all_inbox':
        return MconAllInbox(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'all_inclusive':
        return MconAllInclusive(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'all_match':
        return MconAllMatch(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'all_out':
        return MconAllOut(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'allergies':
        return MconAllergies(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'allergy':
        return MconAllergy(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'alt_route':
        return MconAltRoute(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'alternate_email':
        return MconAlternateEmail(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'altitude':
        return MconAltitude(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'ambulance':
        return MconAmbulance(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'amend':
        return MconAmend(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'amp_stories':
        return MconAmpStories(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'analytics':
        return MconAnalytics(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'anchor':
        return MconAnchor(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android':
        return MconAndroid(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_4_bar':
        return MconAndroidCell4Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_4_bar_alert':
        return MconAndroidCell4BarAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_4_bar_off':
        return MconAndroidCell4BarOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_4_bar_plus':
        return MconAndroidCell4BarPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_5_bar':
        return MconAndroidCell5Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_5_bar_alert':
        return MconAndroidCell5BarAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_5_bar_off':
        return MconAndroidCell5BarOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_5_bar_plus':
        return MconAndroidCell5BarPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_dual_4_bar':
        return MconAndroidCellDual4Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_dual_4_bar_alert':
        return MconAndroidCellDual4BarAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_dual_4_bar_plus':
        return MconAndroidCellDual4BarPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_dual_5_bar':
        return MconAndroidCellDual5Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_dual_5_bar_alert':
        return MconAndroidCellDual5BarAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_cell_dual_5_bar_plus':
        return MconAndroidCellDual5BarPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_3_bar':
        return MconAndroidWifi3Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_3_bar_alert':
        return MconAndroidWifi3BarAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_3_bar_lock':
        return MconAndroidWifi3BarLock(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_3_bar_off':
        return MconAndroidWifi3BarOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_3_bar_plus':
        return MconAndroidWifi3BarPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_3_bar_question':
        return MconAndroidWifi3BarQuestion(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_4_bar':
        return MconAndroidWifi4Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_4_bar_alert':
        return MconAndroidWifi4BarAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_4_bar_lock':
        return MconAndroidWifi4BarLock(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_4_bar_off':
        return MconAndroidWifi4BarOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_4_bar_plus':
        return MconAndroidWifi4BarPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'android_wifi_4_bar_question':
        return MconAndroidWifi4BarQuestion(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'animated_images':
        return MconAnimatedImages(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'animation':
        return MconAnimation(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'aod_tablet':
        return MconAodTablet(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'aod_watch':
        return MconAodWatch(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'apartment':
        return MconApartment(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'api':
        return MconApi(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'apk_document':
        return MconApkDocument(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'apk_install':
        return MconApkInstall(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'app_badging':
        return MconAppBadging(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'app_registration':
        return MconAppRegistration(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'apparel':
        return MconApparel(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'approval':
        return MconApproval(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'approval_delegation':
        return MconApprovalDelegation(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'approval_delegation_off':
        return MconApprovalDelegationOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'apps':
        return MconApps(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'apps_outage':
        return MconAppsOutage(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'aq':
        return MconAq(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'aq_indoor':
        return MconAqIndoor(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'ar_on_you':
        return MconArOnYou(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'ar_stickers':
        return MconArStickers(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'architecture':
        return MconArchitecture(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'archive':
        return MconArchive(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'area_chart':
        return MconAreaChart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arming_countdown':
        return MconArmingCountdown(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_and_edge':
        return MconArrowAndEdge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_back':
        return MconArrowBack(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_back_2':
        return MconArrowBack2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_back_ios':
        return MconArrowBackIos(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_back_ios_new':
        return MconArrowBackIosNew(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_circle_down':
        return MconArrowCircleDown(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_circle_left':
        return MconArrowCircleLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_circle_right':
        return MconArrowCircleRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_circle_up':
        return MconArrowCircleUp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_cool_down':
        return MconArrowCoolDown(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_downward':
        return MconArrowDownward(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_downward_alt':
        return MconArrowDownwardAlt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_drop_down':
        return MconArrowDropDown(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_drop_down_circle':
        return MconArrowDropDownCircle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_drop_up':
        return MconArrowDropUp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_forward':
        return MconArrowForward(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_forward_ios':
        return MconArrowForwardIos(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_insert':
        return MconArrowInsert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_left':
        return MconArrowLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_left_alt':
        return MconArrowLeftAlt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_menu_close':
        return MconArrowMenuClose(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_menu_open':
        return MconArrowMenuOpen(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_or_edge':
        return MconArrowOrEdge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_outward':
        return MconArrowOutward(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_range':
        return MconArrowRange(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_right':
        return MconArrowRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_right_alt':
        return MconArrowRightAlt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_selector_tool':
        return MconArrowSelectorTool(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_shape_up':
        return MconArrowShapeUp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_shape_up_stack':
        return MconArrowShapeUpStack(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_shape_up_stack_2':
        return MconArrowShapeUpStack2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_split':
        return MconArrowSplit(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_top_left':
        return MconArrowTopLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_top_right':
        return MconArrowTopRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_upload_progress':
        return MconArrowUploadProgress(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_upload_ready':
        return MconArrowUploadReady(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_upward':
        return MconArrowUpward(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_upward_alt':
        return MconArrowUpwardAlt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrow_warm_up':
        return MconArrowWarmUp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrows_input':
        return MconArrowsInput(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrows_more_down':
        return MconArrowsMoreDown(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrows_more_up':
        return MconArrowsMoreUp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrows_output':
        return MconArrowsOutput(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'arrows_outward':
        return MconArrowsOutward(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'art_track':
        return MconArtTrack(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'article':
        return MconArticle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'article_person':
        return MconArticlePerson(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'article_shortcut':
        return MconArticleShortcut(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'artist':
        return MconArtist(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'aspect_ratio':
        return MconAspectRatio(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assignment':
        return MconAssignment(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assignment_add':
        return MconAssignmentAdd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assignment_globe':
        return MconAssignmentGlobe(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assignment_ind':
        return MconAssignmentInd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assignment_late':
        return MconAssignmentLate(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assignment_return':
        return MconAssignmentReturn(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assignment_returned':
        return MconAssignmentReturned(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assignment_turned_in':
        return MconAssignmentTurnedIn(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assist_walker':
        return MconAssistWalker(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assistant_device':
        return MconAssistantDevice(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assistant_direction':
        return MconAssistantDirection(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assistant_navigation':
        return MconAssistantNavigation(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assistant_on_hub':
        return MconAssistantOnHub(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'assured_workload':
        return MconAssuredWorkload(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'asterisk':
        return MconAsterisk(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'atm':
        return MconAtm(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'atr':
        return MconAtr(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'attach_email':
        return MconAttachEmail(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'attach_file':
        return MconAttachFile(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'attach_file_add':
        return MconAttachFileAdd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'attach_file_off':
        return MconAttachFileOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'attach_money':
        return MconAttachMoney(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'attachment':
        return MconAttachment(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'attractions':
        return MconAttractions(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'attribution':
        return MconAttribution(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'audio_description':
        return MconAudioDescription(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'audio_file':
        return MconAudioFile(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'audio_video_receiver':
        return MconAudioVideoReceiver(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'auto_awesome_mosaic':
        return MconAutoAwesomeMosaic(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'auto_awesome_motion':
        return MconAutoAwesomeMotion(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'auto_delete':
        return MconAutoDelete(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'auto_read_pause':
        return MconAutoReadPause(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'auto_read_play':
        return MconAutoReadPlay(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'auto_stories':
        return MconAutoStories(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'auto_stories_off':
        return MconAutoStoriesOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'auto_towing':
        return MconAutoTowing(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'auto_transmission':
        return MconAutoTransmission(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'autofps_select':
        return MconAutofpsSelect(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'automation':
        return MconAutomation(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'autopause':
        return MconAutopause(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'autoplay':
        return MconAutoplay(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'autorenew':
        return MconAutorenew(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'autostop':
        return MconAutostop(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'av1':
        return MconAv1(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'av_timer':
        return MconAvTimer(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'avc':
        return MconAvc(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'avg_pace':
        return MconAvgPace(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'avg_time':
        return MconAvgTime(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'award_meal':
        return MconAwardMeal(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'award_star':
        return MconAwardStar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'azm':
        return MconAzm(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'baby_changing_station':
        return MconBabyChangingStation(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'back_hand':
        return MconBackHand(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'back_to_tab':
        return MconBackToTab(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'background_dot_large':
        return MconBackgroundDotLarge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'background_dot_small':
        return MconBackgroundDotSmall(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'background_grid_small':
        return MconBackgroundGridSmall(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'background_replace':
        return MconBackgroundReplace(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'backlight_high':
        return MconBacklightHigh(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'backlight_high_off':
        return MconBacklightHighOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'backlight_low':
        return MconBacklightLow(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'backpack':
        return MconBackpack(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'backspace':
        return MconBackspace(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'backup':
        return MconBackup(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'backup_table':
        return MconBackupTable(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'badge':
        return MconBadge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'badge_critical_battery':
        return MconBadgeCriticalBattery(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'badminton':
        return MconBadminton(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bakery_dining':
        return MconBakeryDining(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'balance':
        return MconBalance(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'balcony':
        return MconBalcony(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'ballot':
        return MconBallot(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bar_chart':
        return MconBarChart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bar_chart_4_bars':
        return MconBarChart4Bars(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bar_chart_off':
        return MconBarChartOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'barcode':
        return MconBarcode(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'barcode_reader':
        return MconBarcodeReader(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'barcode_scanner':
        return MconBarcodeScanner(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'barefoot':
        return MconBarefoot(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'batch_prediction':
        return MconBatchPrediction(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bath_bedrock':
        return MconBathBedrock(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bath_outdoor':
        return MconBathOutdoor(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bath_private':
        return MconBathPrivate(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bath_public_large':
        return MconBathPublicLarge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bath_soak':
        return MconBathSoak(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bathroom':
        return MconBathroom(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bathtub':
        return MconBathtub(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_0_bar':
        return MconBattery0Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_1_bar':
        return MconBattery1Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_2_bar':
        return MconBattery2Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_3_bar':
        return MconBattery3Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_4_bar':
        return MconBattery4Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_5_bar':
        return MconBattery5Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_6_bar':
        return MconBattery6Bar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_alert':
        return MconBatteryAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_0':
        return MconBatteryAndroid0(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_1':
        return MconBatteryAndroid1(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_2':
        return MconBatteryAndroid2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_3':
        return MconBatteryAndroid3(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_4':
        return MconBatteryAndroid4(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_5':
        return MconBatteryAndroid5(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_6':
        return MconBatteryAndroid6(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_alert':
        return MconBatteryAndroidAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_bolt':
        return MconBatteryAndroidBolt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_1':
        return MconBatteryAndroidFrame1(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_2':
        return MconBatteryAndroidFrame2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_3':
        return MconBatteryAndroidFrame3(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_4':
        return MconBatteryAndroidFrame4(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_5':
        return MconBatteryAndroidFrame5(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_6':
        return MconBatteryAndroidFrame6(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_alert':
        return MconBatteryAndroidFrameAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_bolt':
        return MconBatteryAndroidFrameBolt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_full':
        return MconBatteryAndroidFrameFull(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_plus':
        return MconBatteryAndroidFramePlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_question':
        return MconBatteryAndroidFrameQuestion(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_share':
        return MconBatteryAndroidFrameShare(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_frame_shield':
        return MconBatteryAndroidFrameShield(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_full':
        return MconBatteryAndroidFull(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_plus':
        return MconBatteryAndroidPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_question':
        return MconBatteryAndroidQuestion(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_share':
        return MconBatteryAndroidShare(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_android_shield':
        return MconBatteryAndroidShield(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_change':
        return MconBatteryChange(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_charging_20':
        return MconBatteryCharging20(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_charging_30':
        return MconBatteryCharging30(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_charging_50':
        return MconBatteryCharging50(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_charging_60':
        return MconBatteryCharging60(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_charging_80':
        return MconBatteryCharging80(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_charging_90':
        return MconBatteryCharging90(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_charging_full':
        return MconBatteryChargingFull(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_error':
        return MconBatteryError(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_full':
        return MconBatteryFull(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_full_alt':
        return MconBatteryFullAlt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_horiz_000':
        return MconBatteryHoriz000(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_horiz_050':
        return MconBatteryHoriz050(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_horiz_075':
        return MconBatteryHoriz075(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_low':
        return MconBatteryLow(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_plus':
        return MconBatteryPlus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_profile':
        return MconBatteryProfile(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_saver':
        return MconBatterySaver(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_share':
        return MconBatteryShare(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_status_good':
        return MconBatteryStatusGood(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_unknown':
        return MconBatteryUnknown(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'battery_very_low':
        return MconBatteryVeryLow(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'beach_access':
        return MconBeachAccess(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bed':
        return MconBed(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bedroom_baby':
        return MconBedroomBaby(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bedroom_child':
        return MconBedroomChild(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bedroom_parent':
        return MconBedroomParent(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bedtime':
        return MconBedtime(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bedtime_off':
        return MconBedtimeOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'beenhere':
        return MconBeenhere(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'beer_meal':
        return MconBeerMeal(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bento':
        return MconBento(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bia':
        return MconBia(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bid_landscape':
        return MconBidLandscape(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bid_landscape_disabled':
        return MconBidLandscapeDisabled(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bigtop_updates':
        return MconBigtopUpdates(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bike_dock':
        return MconBikeDock(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bike_lane':
        return MconBikeLane(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bike_scooter':
        return MconBikeScooter(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'biotech':
        return MconBiotech(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blanket':
        return MconBlanket(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blender':
        return MconBlender(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blind':
        return MconBlind(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blinds':
        return MconBlinds(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blinds_closed':
        return MconBlindsClosed(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'block':
        return MconBlock(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blood_pressure':
        return MconBloodPressure(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bloodtype':
        return MconBloodtype(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bluetooth':
        return MconBluetooth(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bluetooth_connected':
        return MconBluetoothConnected(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bluetooth_disabled':
        return MconBluetoothDisabled(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bluetooth_drive':
        return MconBluetoothDrive(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bluetooth_searching':
        return MconBluetoothSearching(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blur_circular':
        return MconBlurCircular(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blur_linear':
        return MconBlurLinear(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blur_medium':
        return MconBlurMedium(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blur_off':
        return MconBlurOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blur_on':
        return MconBlurOn(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'blur_short':
        return MconBlurShort(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'boat_bus':
        return MconBoatBus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'boat_railway':
        return MconBoatRailway(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'body_fat':
        return MconBodyFat(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'body_system':
        return MconBodySystem(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bolt':
        return MconBolt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bomb':
        return MconBomb(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'book':
        return MconBook(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'book_2':
        return MconBook2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'book_3':
        return MconBook3(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'book_4':
        return MconBook4(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'book_5':
        return MconBook5(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'book_6':
        return MconBook6(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'book_ribbon':
        return MconBookRibbon(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmark':
        return MconBookmark(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmark_add':
        return MconBookmarkAdd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmark_added':
        return MconBookmarkAdded(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmark_bag':
        return MconBookmarkBag(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmark_check':
        return MconBookmarkCheck(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmark_flag':
        return MconBookmarkFlag(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmark_heart':
        return MconBookmarkHeart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmark_manager':
        return MconBookmarkManager(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmark_remove':
        return MconBookmarkRemove(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmark_stacks':
        return MconBookmarkStacks(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmark_star':
        return MconBookmarkStar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bookmarks':
        return MconBookmarks(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'books_movies_and_music':
        return MconBooksMoviesAndMusic(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_all':
        return MconBorderAll(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_bottom':
        return MconBorderBottom(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_clear':
        return MconBorderClear(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_color':
        return MconBorderColor(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_horizontal':
        return MconBorderHorizontal(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_inner':
        return MconBorderInner(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_left':
        return MconBorderLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_outer':
        return MconBorderOuter(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_right':
        return MconBorderRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_style':
        return MconBorderStyle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_top':
        return MconBorderTop(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'border_vertical':
        return MconBorderVertical(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'borg':
        return MconBorg(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bottom_app_bar':
        return MconBottomAppBar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bottom_drawer':
        return MconBottomDrawer(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bottom_navigation':
        return MconBottomNavigation(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bottom_panel_close':
        return MconBottomPanelClose(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bottom_panel_open':
        return MconBottomPanelOpen(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bottom_right_click':
        return MconBottomRightClick(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bottom_sheets':
        return MconBottomSheets(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'box':
        return MconBox(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'box_add':
        return MconBoxAdd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'box_edit':
        return MconBoxEdit(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'boy':
        return MconBoy(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brand_awareness':
        return MconBrandAwareness(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brand_family':
        return MconBrandFamily(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'branding_watermark':
        return MconBrandingWatermark(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'breakfast_dining':
        return MconBreakfastDining(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'breaking_news':
        return MconBreakingNews(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'breaking_news_alt_1':
        return MconBreakingNewsAlt1(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'breastfeeding':
        return MconBreastfeeding(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brick':
        return MconBrick(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'briefcase_meal':
        return MconBriefcaseMeal(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brightness_1':
        return MconBrightness1(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brightness_2':
        return MconBrightness2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brightness_3':
        return MconBrightness3(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brightness_4':
        return MconBrightness4(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brightness_5':
        return MconBrightness5(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brightness_6':
        return MconBrightness6(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brightness_7':
        return MconBrightness7(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brightness_alert':
        return MconBrightnessAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brightness_auto':
        return MconBrightnessAuto(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brightness_empty':
        return MconBrightnessEmpty(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brightness_medium':
        return MconBrightnessMedium(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bring_your_own_ip':
        return MconBringYourOwnIp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'broadcast_on_home':
        return MconBroadcastOnHome(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'broadcast_on_personal':
        return MconBroadcastOnPersonal(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'broken_image':
        return MconBrokenImage(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'browse':
        return MconBrowse(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'browse_activity':
        return MconBrowseActivity(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'browse_gallery':
        return MconBrowseGallery(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'browser_updated':
        return MconBrowserUpdated(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brunch_dining':
        return MconBrunchDining(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'brush':
        return MconBrush(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bubble':
        return MconBubble(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bubble_chart':
        return MconBubbleChart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bubbles':
        return MconBubbles(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bucket_check':
        return MconBucketCheck(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bug_report':
        return MconBugReport(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'build':
        return MconBuild(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'build_circle':
        return MconBuildCircle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bungalow':
        return MconBungalow(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'burst_mode':
        return MconBurstMode(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bus_alert':
        return MconBusAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'bus_railway':
        return MconBusRailway(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'business_center':
        return MconBusinessCenter(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'business_chip':
        return MconBusinessChip(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'business_messages':
        return MconBusinessMessages(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'buttons_alt':
        return MconButtonsAlt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cabin':
        return MconCabin(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cable':
        return MconCable(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cable_car':
        return MconCableCar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cached':
        return MconCached(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cadence':
        return MconCadence(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cake':
        return MconCake(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cake_add':
        return MconCakeAdd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calculate':
        return MconCalculate(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_add_on':
        return MconCalendarAddOn(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_apps_script':
        return MconCalendarAppsScript(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_check':
        return MconCalendarCheck(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_clock':
        return MconCalendarClock(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_lock':
        return MconCalendarLock(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_meal':
        return MconCalendarMeal(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_meal_2':
        return MconCalendarMeal2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_month':
        return MconCalendarMonth(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_today':
        return MconCalendarToday(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_view_day':
        return MconCalendarViewDay(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_view_month':
        return MconCalendarViewMonth(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'calendar_view_week':
        return MconCalendarViewWeek(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'call':
        return MconCall(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'call_end':
        return MconCallEnd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'call_log':
        return MconCallLog(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'call_made':
        return MconCallMade(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'call_merge':
        return MconCallMerge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'call_missed':
        return MconCallMissed(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'call_missed_outgoing':
        return MconCallMissedOutgoing(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'call_quality':
        return MconCallQuality(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'call_received':
        return MconCallReceived(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'call_split':
        return MconCallSplit(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'call_to_action':
        return MconCallToAction(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'camera':
        return MconCamera(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'camera_indoor':
        return MconCameraIndoor(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'camera_outdoor':
        return MconCameraOutdoor(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'camera_roll':
        return MconCameraRoll(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'camera_video':
        return MconCameraVideo(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cameraswitch':
        return MconCameraswitch(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'campaign':
        return MconCampaign(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'camping':
        return MconCamping(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cancel':
        return MconCancel(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cancel_presentation':
        return MconCancelPresentation(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cancel_schedule_send':
        return MconCancelScheduleSend(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'candle':
        return MconCandle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'candlestick_chart':
        return MconCandlestickChart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cannabis':
        return MconCannabis(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'captive_portal':
        return MconCaptivePortal(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'capture':
        return MconCapture(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_crash':
        return MconCarCrash(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_defrost_left':
        return MconCarDefrostLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_defrost_low_left':
        return MconCarDefrostLowLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_defrost_low_right':
        return MconCarDefrostLowRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_defrost_mid_left':
        return MconCarDefrostMidLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_defrost_mid_low_left':
        return MconCarDefrostMidLowLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_defrost_mid_low_right':
        return MconCarDefrostMidLowRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_defrost_mid_right':
        return MconCarDefrostMidRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_defrost_right':
        return MconCarDefrostRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_fan_low_left':
        return MconCarFanLowLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_fan_low_mid_left':
        return MconCarFanLowMidLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_fan_low_right':
        return MconCarFanLowRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_fan_mid_left':
        return MconCarFanMidLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_fan_mid_low_right':
        return MconCarFanMidLowRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_fan_mid_right':
        return MconCarFanMidRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_fan_recirculate':
        return MconCarFanRecirculate(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_gear':
        return MconCarGear(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_lock':
        return MconCarLock(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_mirror_heat':
        return MconCarMirrorHeat(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_rental':
        return MconCarRental(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_repair':
        return MconCarRepair(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'car_tag':
        return MconCarTag(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'card_membership':
        return MconCardMembership(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'card_travel':
        return MconCardTravel(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cardio_load':
        return MconCardioLoad(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cardiology':
        return MconCardiology(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cards':
        return MconCards(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cards_star':
        return MconCardsStar(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'carpenter':
        return MconCarpenter(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'carry_on_bag':
        return MconCarryOnBag(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'carry_on_bag_checked':
        return MconCarryOnBagChecked(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'carry_on_bag_inactive':
        return MconCarryOnBagInactive(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'carry_on_bag_question':
        return MconCarryOnBagQuestion(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cases':
        return MconCases(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'casino':
        return MconCasino(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cast':
        return MconCast(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cast_connected':
        return MconCastConnected(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cast_for_education':
        return MconCastForEducation(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cast_pause':
        return MconCastPause(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cast_warning':
        return MconCastWarning(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'castle':
        return MconCastle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'category':
        return MconCategory(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'category_search':
        return MconCategorySearch(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'celebration':
        return MconCelebration(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cell_merge':
        return MconCellMerge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cell_tower':
        return MconCellTower(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cell_wifi':
        return MconCellWifi(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'center_focus_strong':
        return MconCenterFocusStrong(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'center_focus_weak':
        return MconCenterFocusWeak(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chair':
        return MconChair(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chair_alt':
        return MconChairAlt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chair_counter':
        return MconChairCounter(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chair_fireplace':
        return MconChairFireplace(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chair_umbrella':
        return MconChairUmbrella(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chalet':
        return MconChalet(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'change_circle':
        return MconChangeCircle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'change_history':
        return MconChangeHistory(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'charger':
        return MconCharger(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chart_data':
        return MconChartData(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chat':
        return MconChat(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chat_add_on':
        return MconChatAddOn(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chat_apps_script':
        return MconChatAppsScript(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chat_bubble':
        return MconChatBubble(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chat_dashed':
        return MconChatDashed(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chat_error':
        return MconChatError(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chat_info':
        return MconChatInfo(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chat_paste_go':
        return MconChatPasteGo(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chat_paste_go_2':
        return MconChatPasteGo2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'check':
        return MconCheck(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'check_box':
        return MconCheckBox(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'check_box_outline_blank':
        return MconCheckBoxOutlineBlank(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'check_circle':
        return MconCheckCircle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'check_circle_unread':
        return MconCheckCircleUnread(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'check_in_out':
        return MconCheckInOut(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'check_indeterminate_small':
        return MconCheckIndeterminateSmall(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'check_small':
        return MconCheckSmall(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'checkbook':
        return MconCheckbook(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'checked_bag':
        return MconCheckedBag(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'checked_bag_question':
        return MconCheckedBagQuestion(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'checklist':
        return MconChecklist(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'checklist_rtl':
        return MconChecklistRtl(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'checkroom':
        return MconCheckroom(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cheer':
        return MconCheer(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chef_hat':
        return MconChefHat(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chess':
        return MconChess(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chess_bishop':
        return MconChessBishop(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chess_bishop_2':
        return MconChessBishop2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chess_king':
        return MconChessKing(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chess_king_2':
        return MconChessKing2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chess_knight':
        return MconChessKnight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chess_pawn':
        return MconChessPawn(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chess_pawn_2':
        return MconChessPawn2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chess_queen':
        return MconChessQueen(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chess_rook':
        return MconChessRook(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chevron_backward':
        return MconChevronBackward(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chevron_forward':
        return MconChevronForward(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chevron_left':
        return MconChevronLeft(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chevron_line_up':
        return MconChevronLineUp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chevron_right':
        return MconChevronRight(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'child_care':
        return MconChildCare(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'child_friendly':
        return MconChildFriendly(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'child_hat':
        return MconChildHat(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chip_extraction':
        return MconChipExtraction(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chips':
        return MconChips(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chrome_reader_mode':
        return MconChromeReaderMode(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chromecast_2':
        return MconChromecast2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chromecast_device':
        return MconChromecastDevice(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'chronic':
        return MconChronic(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'church':
        return MconChurch(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cinematic_blur':
        return MconCinematicBlur(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'circle':
        return MconCircle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'circle_notifications':
        return MconCircleNotifications(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'circles':
        return MconCircles(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'circles_ext':
        return MconCirclesExt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clarify':
        return MconClarify(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clean_hands':
        return MconCleanHands(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cleaning':
        return MconCleaning(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cleaning_bucket':
        return MconCleaningBucket(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cleaning_services':
        return MconCleaningServices(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clear_all':
        return MconClearAll(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clear_day':
        return MconClearDay(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'climate_mini_split':
        return MconClimateMiniSplit(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clinical_notes':
        return MconClinicalNotes(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clock_arrow_down':
        return MconClockArrowDown(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clock_arrow_up':
        return MconClockArrowUp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clock_loader_10':
        return MconClockLoader10(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clock_loader_20':
        return MconClockLoader20(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clock_loader_40':
        return MconClockLoader40(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clock_loader_60':
        return MconClockLoader60(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clock_loader_80':
        return MconClockLoader80(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'clock_loader_90':
        return MconClockLoader90(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'close':
        return MconClose(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'close_fullscreen':
        return MconCloseFullscreen(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'close_small':
        return MconCloseSmall(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'closed_caption':
        return MconClosedCaption(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'closed_caption_add':
        return MconClosedCaptionAdd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'closed_caption_disabled':
        return MconClosedCaptionDisabled(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cloud':
        return MconCloud(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cloud_alert':
        return MconCloudAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cloud_circle':
        return MconCloudCircle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cloud_done':
        return MconCloudDone(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cloud_download':
        return MconCloudDownload(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cloud_lock':
        return MconCloudLock(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cloud_off':
        return MconCloudOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cloud_sync':
        return MconCloudSync(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cloud_upload':
        return MconCloudUpload(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'co2':
        return MconCo2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'co_present':
        return MconCoPresent(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'code':
        return MconCode(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'code_blocks':
        return MconCodeBlocks(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'code_off':
        return MconCodeOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'coffee':
        return MconCoffee(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'coffee_maker':
        return MconCoffeeMaker(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cognition':
        return MconCognition(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cognition_2':
        return MconCognition2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'collapse_all':
        return MconCollapseAll(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'collapse_content':
        return MconCollapseContent(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'collections_bookmark':
        return MconCollectionsBookmark(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'colorize':
        return MconColorize(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'colors':
        return MconColors(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'combine_columns':
        return MconCombineColumns(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'comedy_mask':
        return MconComedyMask(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'comic_bubble':
        return MconComicBubble(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'comment':
        return MconComment(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'comment_bank':
        return MconCommentBank(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'comments_disabled':
        return MconCommentsDisabled(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'commit':
        return MconCommit(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'communication':
        return MconCommunication(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'communities':
        return MconCommunities(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'commute':
        return MconCommute(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'compare':
        return MconCompare(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'compare_arrows':
        return MconCompareArrows(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'compass_calibration':
        return MconCompassCalibration(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'component_exchange':
        return MconComponentExchange(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'compost':
        return MconCompost(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'compress':
        return MconCompress(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'computer':
        return MconComputer(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'computer_arrow_up':
        return MconComputerArrowUp(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'computer_cancel':
        return MconComputerCancel(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'concierge':
        return MconConcierge(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'conditions':
        return MconConditions(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'confirmation_number':
        return MconConfirmationNumber(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'congenital':
        return MconCongenital(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'connect_without_contact':
        return MconConnectWithoutContact(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'connected_tv':
        return MconConnectedTv(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'connecting_airports':
        return MconConnectingAirports(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'construction':
        return MconConstruction(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contact_emergency':
        return MconContactEmergency(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contact_mail':
        return MconContactMail(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contact_page':
        return MconContactPage(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contact_phone':
        return MconContactPhone(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contact_support':
        return MconContactSupport(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contactless':
        return MconContactless(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contactless_off':
        return MconContactlessOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contacts':
        return MconContacts(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contacts_product':
        return MconContactsProduct(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'content_copy':
        return MconContentCopy(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'content_cut':
        return MconContentCut(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'content_paste':
        return MconContentPaste(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'content_paste_go':
        return MconContentPasteGo(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'content_paste_off':
        return MconContentPasteOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'content_paste_search':
        return MconContentPasteSearch(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contextual_token':
        return MconContextualToken(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contextual_token_add':
        return MconContextualTokenAdd(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contract':
        return MconContract(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contract_delete':
        return MconContractDelete(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contract_edit':
        return MconContractEdit(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contrast':
        return MconContrast(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contrast_circle':
        return MconContrastCircle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contrast_rtl_off':
        return MconContrastRtlOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'contrast_square':
        return MconContrastSquare(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'control_camera':
        return MconControlCamera(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'control_point_duplicate':
        return MconControlPointDuplicate(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'controller_gen':
        return MconControllerGen(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'conversation':
        return MconConversation(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'conversion_path':
        return MconConversionPath(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'conversion_path_off':
        return MconConversionPathOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'convert_to_text':
        return MconConvertToText(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'conveyor_belt':
        return MconConveyorBelt(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cookie':
        return MconCookie(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cookie_off':
        return MconCookieOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cooking':
        return MconCooking(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cool_to_dry':
        return MconCoolToDry(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'copy_all':
        return MconCopyAll(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'copyright':
        return MconCopyright(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'coronavirus':
        return MconCoronavirus(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'corporate_fare':
        return MconCorporateFare(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cottage':
        return MconCottage(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'counter_0':
        return MconCounter0(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'counter_1':
        return MconCounter1(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'counter_2':
        return MconCounter2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'counter_3':
        return MconCounter3(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'counter_4':
        return MconCounter4(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'counter_5':
        return MconCounter5(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'counter_6':
        return MconCounter6(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'counter_7':
        return MconCounter7(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'counter_8':
        return MconCounter8(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'counter_9':
        return MconCounter9(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'countertops':
        return MconCountertops(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'create_new_folder':
        return MconCreateNewFolder(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'credit_card':
        return MconCreditCard(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'credit_card_clock':
        return MconCreditCardClock(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'credit_card_gear':
        return MconCreditCardGear(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'credit_card_heart':
        return MconCreditCardHeart(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'credit_card_off':
        return MconCreditCardOff(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'credit_score':
        return MconCreditScore(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crib':
        return MconCrib(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crisis_alert':
        return MconCrisisAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crop':
        return MconCrop(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crop_16_9':
        return MconCrop169(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crop_3_2':
        return MconCrop32(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crop_5_4':
        return MconCrop54(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crop_7_5':
        return MconCrop75(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crop_9_16':
        return MconCrop916(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crop_free':
        return MconCropFree(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crop_landscape':
        return MconCropLandscape(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crop_portrait':
        return MconCropPortrait(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crop_rotate':
        return MconCropRotate(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crop_square':
        return MconCropSquare(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crossword':
        return MconCrossword(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crowdsource':
        return MconCrowdsource(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'crown':
        return MconCrown(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cruelty_free':
        return MconCrueltyFree(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'css':
        return MconCss(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'csv':
        return MconCsv(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'currency_bitcoin':
        return MconCurrencyBitcoin(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'currency_exchange':
        return MconCurrencyExchange(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'currency_franc':
        return MconCurrencyFranc(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'currency_lira':
        return MconCurrencyLira(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'currency_pound':
        return MconCurrencyPound(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'currency_ruble':
        return MconCurrencyRuble(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'currency_rupee':
        return MconCurrencyRupee(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'currency_rupee_circle':
        return MconCurrencyRupeeCircle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'currency_yen':
        return MconCurrencyYen(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'currency_yuan':
        return MconCurrencyYuan(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'curtains':
        return MconCurtains(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'curtains_closed':
        return MconCurtainsClosed(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'custom_typography':
        return MconCustomTypography(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cycle':
        return MconCycle(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'cyclone':
        return MconCyclone(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'dangerous':
        return MconDangerous(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'dark_mode':
        return MconDarkMode(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'dashboard':
        return MconDashboard(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'dashboard_2':
        return MconDashboard2(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'dashboard_customize':
        return MconDashboardCustomize(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'data_alert':
        return MconDataAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'data_array':
        return MconDataArray(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'data_check':
        return MconDataCheck(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'data_exploration':
        return MconDataExploration(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'data_info_alert':
        return MconDataInfoAlert(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);
      case 'data_loss_prevention':
        return MconDataLossPrevention(
            key: _iconKey,
          size: widget.size,
          color: widget.color,
          animationType: widget.animationType,
          animationDirection: widget.animationDirection,
          duration: widget.duration,
          curve: widget.curve);

      default:
        return Icon(Icons.widgets, size: widget.size, color: widget.color);
    }
  }
}

/// Fixed control panel on the right side
class _ControlPanel extends StatelessWidget {
  const _ControlPanel({
    required this.state,
    required this.onSizeChanged,
    required this.onColorChanged,
    required this.onDurationChanged,
    required this.onAnimationTypeChanged,
    required this.onAnimationDirectionChanged,
    required this.onCurveChanged,
    required this.onClearSelection,
  });

  final PlaygroundState state;
  final Function(double) onSizeChanged;
  final Function(Color) onColorChanged;
  final Function(Duration) onDurationChanged;
  final Function(MconAnimationType) onAnimationTypeChanged;
  final Function(MconAnimationDirection) onAnimationDirectionChanged;
  final Function(Curve) onCurveChanged;
  final VoidCallback onClearSelection;

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 360,
      height: MediaQuery.of(context).size.height,
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        border: Border(
          left: BorderSide(
            color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.2),
          ),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.05),
            blurRadius: 24,
            offset: const Offset(-4, 0),
          ),
        ],
      ),
      child: Column(
        children: [
          // Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              border: Border(
                bottom: BorderSide(
                  color: Theme.of(context)
                      .colorScheme
                      .outline
                      .withValues(alpha: 0.2),
                ),
              ),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.tune,
                  size: 24,
                  color: Theme.of(context).colorScheme.primary,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    'Controls',
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                ),
                if (state.selectedIcon != null)
                  IconButton(
                    icon: const Icon(Icons.close, size: 20),
                    onPressed: onClearSelection,
                    tooltip: 'Clear selection',
                  ),
              ],
            ),
          ),

          // Scrollable Controls
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (state.selectedIcon == null)
                    Container(
                      padding: const EdgeInsets.all(24),
                      decoration: BoxDecoration(
                        color: Theme.of(context)
                            .colorScheme
                            .surfaceContainerHighest
                            .withValues(alpha: 0.5),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(
                          color: Theme.of(context)
                              .colorScheme
                              .outline
                              .withValues(alpha: 0.2),
                        ),
                      ),
                      child: Row(
                        children: [
                          Icon(
                            Icons.info_outline,
                            size: 20,
                            color: Theme.of(context)
                                .colorScheme
                                .onSurface
                                .withValues(alpha: 0.6),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              'Select an icon to customize',
                              style: Theme.of(context)
                                  .textTheme
                                  .bodyMedium
                                  ?.copyWith(
                                    color: Theme.of(context)
                                        .colorScheme
                                        .onSurface
                                        .withValues(alpha: 0.6),
                                  ),
                            ),
                          ),
                        ],
                      ),
                    )
                  else ...[
                    _ControlGroup(
                      title: 'Size',
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Slider(
                            value: state.size,
                            min: 24,
                            max: 128,
                            divisions: 26,
                            label: '${state.size.round()}px',
                            onChanged: onSizeChanged,
                          ),
                          Text(
                            '${state.size.round()}px',
                            style: Theme.of(context)
                                .textTheme
                                .labelSmall
                                ?.copyWith(
                                  color: Theme.of(context)
                                      .colorScheme
                                      .onSurface
                                      .withValues(alpha: 0.6),
                                ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 24),
                    _ControlGroup(
                      title: 'Duration',
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Slider(
                            value: state.duration.inMilliseconds.toDouble(),
                            min: 100,
                            max: 2000,
                            divisions: 19,
                            label: '${state.duration.inMilliseconds}ms',
                            onChanged: (value) => onDurationChanged(
                              Duration(milliseconds: value.round()),
                            ),
                          ),
                          Text(
                            '${state.duration.inMilliseconds}ms',
                            style: Theme.of(context)
                                .textTheme
                                .labelSmall
                                ?.copyWith(
                                  color: Theme.of(context)
                                      .colorScheme
                                      .onSurface
                                      .withValues(alpha: 0.6),
                                ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 24),
                    _ControlGroup(
                      title: 'Animation Type',
                      child: DropdownButtonFormField<MconAnimationType>(
                        initialValue: state.animationType,
                        decoration: InputDecoration(
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                          contentPadding: const EdgeInsets.symmetric(
                            horizontal: 16,
                            vertical: 12,
                          ),
                        ),
                        items: MconAnimationType.values
                            .map((type) => DropdownMenuItem(
                                  value: type,
                                  child: Text(_formatEnumName(type.name)),
                                ))
                            .toList(),
                        onChanged: (value) {
                          if (value != null) {
                            onAnimationTypeChanged(value);
                          }
                        },
                      ),
                    ),
                    const SizedBox(height: 24),
                    _ControlGroup(
                      title: 'Direction',
                      child: DropdownButtonFormField<MconAnimationDirection>(
                        initialValue: state.animationDirection,
                        decoration: InputDecoration(
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                          contentPadding: const EdgeInsets.symmetric(
                            horizontal: 16,
                            vertical: 12,
                          ),
                        ),
                        items: MconAnimationDirection.values
                            .map((dir) => DropdownMenuItem(
                                  value: dir,
                                  child: Text(_formatEnumName(dir.name)),
                                ))
                            .toList(),
                        onChanged: (value) {
                          if (value != null) {
                            onAnimationDirectionChanged(value);
                          }
                        },
                      ),
                    ),
                    const SizedBox(height: 24),
                    _ControlGroup(
                      title: 'Curve',
                      child: DropdownButtonFormField<Curve>(
                        initialValue: state.curve,
                        decoration: InputDecoration(
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                          contentPadding: const EdgeInsets.symmetric(
                            horizontal: 16,
                            vertical: 12,
                          ),
                        ),
                        items: const [
                          DropdownMenuItem(
                            value: Curves.linear,
                            child: Text('Linear'),
                          ),
                          DropdownMenuItem(
                            value: Curves.easeIn,
                            child: Text('Ease In'),
                          ),
                          DropdownMenuItem(
                            value: Curves.easeOut,
                            child: Text('Ease Out'),
                          ),
                          DropdownMenuItem(
                            value: Curves.easeInOut,
                            child: Text('Ease In Out'),
                          ),
                          DropdownMenuItem(
                            value: Curves.elasticIn,
                            child: Text('Elastic In'),
                          ),
                          DropdownMenuItem(
                            value: Curves.elasticOut,
                            child: Text('Elastic Out'),
                          ),
                          DropdownMenuItem(
                            value: Curves.bounceIn,
                            child: Text('Bounce In'),
                          ),
                          DropdownMenuItem(
                            value: Curves.bounceOut,
                            child: Text('Bounce Out'),
                          ),
                        ],
                        onChanged: (value) {
                          if (value != null) {
                            onCurveChanged(value);
                          }
                        },
                      ),
                    ),
                    const SizedBox(height: 24),
                    _ControlGroup(
                      title: 'Color',
                      child: _ColorPicker(
                        color: state.color,
                        onColorChanged: onColorChanged,
                      ),
                    ),
                    const SizedBox(height: 32),
                    _CodePreview(state: state),
                  ],
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _formatEnumName(String name) {
    return name
        .replaceAllMapped(
          RegExp(r'([A-Z])'),
          (match) => ' ${match.group(1)}',
        )
        .trim()
        .split(' ')
        .map((word) => word[0].toUpperCase() + word.substring(1))
        .join(' ');
  }
}

/// Control group with title
class _ControlGroup extends StatelessWidget {
  const _ControlGroup({
    required this.title,
    required this.child,
  });

  final String title;
  final Widget child;

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.w600,
                color: Theme.of(context).colorScheme.onSurface,
              ),
        ),
        const SizedBox(height: 12),
        child,
      ],
    );
  }
}

/// Color picker widget
class _ColorPicker extends StatelessWidget {
  const _ColorPicker({
    required this.color,
    required this.onColorChanged,
  });

  final Color color;
  final Function(Color) onColorChanged;

  @override
  Widget build(BuildContext context) {
    final colors = [
      const Color(0xFF6366F1), // Indigo
      const Color(0xFFEC4899), // Pink
      const Color(0xFFF59E0B), // Amber
      const Color(0xFF10B981), // Emerald
      const Color(0xFF3B82F6), // Blue
      const Color(0xFF8B5CF6), // Purple
      const Color(0xFFEF4444), // Red
      const Color(0xFF14B8A6), // Teal
    ];

    return Wrap(
      spacing: 12,
      runSpacing: 12,
      children: colors.map((c) {
        final isSelected = c.r == color.r &&
            c.g == color.g &&
            c.b == color.b &&
            c.a == color.a;
        return GestureDetector(
          onTap: () => onColorChanged(c),
          child: Container(
            width: 48,
            height: 48,
            decoration: BoxDecoration(
              color: c,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(
                color: isSelected
                    ? Theme.of(context).colorScheme.onSurface
                    : Colors.transparent,
                width: 3,
              ),
              boxShadow: [
                BoxShadow(
                  color: c.withValues(alpha: 0.3),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: isSelected
                ? const Icon(Icons.check, color: Colors.white, size: 24)
                : null,
          ),
        );
      }).toList(),
    );
  }
}

/// Code preview widget
class _CodePreview extends StatelessWidget {
  const _CodePreview({required this.state});

  final PlaygroundState state;

  @override
  Widget build(BuildContext context) {
    if (state.selectedIcon == null) return const SizedBox.shrink();

    final iconName = state.selectedIcon!
        .split('_')
        .map((word) => word[0].toUpperCase() + word.substring(1))
        .join('');

    final colorHex =
        '0x${(state.color.a * 255).round().toRadixString(16).padLeft(2, '0')}${(state.color.r * 255).round().toRadixString(16).padLeft(2, '0')}${(state.color.g * 255).round().toRadixString(16).padLeft(2, '0')}${(state.color.b * 255).round().toRadixString(16).padLeft(2, '0')}'
            .toUpperCase();

    final code = '''Mcon$iconName(
  size: ${state.size.round()},
  color: Color($colorHex),
  duration: Duration(milliseconds: ${state.duration.inMilliseconds}),
  animationType: MconAnimationType.${state.animationType.name},
  animationDirection: MconAnimationDirection.${state.animationDirection.name},
  curve: Curves.${_getCurveName(state.curve)},
)''';

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surfaceContainerHighest,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.2),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.code,
                size: 16,
                color: Theme.of(context)
                    .colorScheme
                    .onSurface
                    .withValues(alpha: 0.6),
              ),
              const SizedBox(width: 8),
              Text(
                'Code',
                style: Theme.of(context).textTheme.labelMedium?.copyWith(
                      fontWeight: FontWeight.w600,
                      color: Theme.of(context)
                          .colorScheme
                          .onSurface
                          .withValues(alpha: 0.6),
                    ),
              ),
              const Spacer(),
              IconButton(
                icon: const Icon(Icons.copy, size: 16),
                onPressed: () {
                  Clipboard.setData(ClipboardData(text: code));
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: const Text('Code copied to clipboard'),
                      behavior: SnackBarBehavior.floating,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                  );
                },
                tooltip: 'Copy code',
              ),
            ],
          ),
          const SizedBox(height: 12),
          SelectableText(
            code,
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  fontFamily: 'monospace',
                  color: Theme.of(context).colorScheme.onSurface,
                ),
          ),
        ],
      ),
    );
  }

  String _getCurveName(Curve curve) {
    if (curve == Curves.linear) return 'linear';
    if (curve == Curves.easeIn) return 'easeIn';
    if (curve == Curves.easeOut) return 'easeOut';
    if (curve == Curves.easeInOut) return 'easeInOut';
    if (curve == Curves.elasticIn) return 'elasticIn';
    if (curve == Curves.elasticOut) return 'elasticOut';
    if (curve == Curves.bounceIn) return 'bounceIn';
    if (curve == Curves.bounceOut) return 'bounceOut';
    return 'easeInOut';
  }
}
